- Implement the optimizer
- Implement more handlers, like !=
- Rework functions in env so they can be AST blocks
- Implement runtime-defined functions
 - think about function arguments, how to access them
- Implement function output redirection
- Implement conversion to IR
- find way to pass environment variables for jobs
  in special way so they aren't ever set for the
  host process
- finish scripting
 - rewrite to not link directly to dl
 - interactive/compiled mode
 - permanent caches
 - pre-caching
 - startup scripts
- Implement running functions as jobs
 - do what bash does an run them in a new wash process
- Re-write functions and handlers in scripts where possible
- put various settings and things into settings variables
- improve passing of environment variables to new jobs
- clean up controls Ã  la input
- Polish history implementation
 - is a type of completion
 - maybe a separate object class
 - combine previous commands, lines, exit statuses and the such?
- completion
 - hook into bash completion
 - Parameter expansion, based around regex
  - automatically fix bash-style patterns
- bash integration

future:
- function paths?
- better terminal protocol
 - over dbus
- terminal client to match
- wash_start entry points

Thoughts on completion:

Implement as a graph, where each node has info like line, time, etc
completion are weight functions
 => two major classes of completions:
  - min-complete
  - max complete
 where each selects either the min-weighted or max-weighted neighbor
 => things like history are simple functions of time, min-weighted
